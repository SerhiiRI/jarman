#+STARTUP: indent

* ReGex
** Java 
*** GetSet space remove 
#+begin_src clojure
  #"(?<=\{)\n\s+((?:return|this)[^;]+;)\n\s+(?=\})"
#+end_src

#+begin_src java 
  // transform three line
  public ProgramDofinansowania getProgramDofinansowania() {
      return programDofinansowania;
  }
  // into one
  public ProgramDofinansowania getProgramDofinansowania() {return programDofinansowania;}
#+end_src

* Common Lisp Formatter
** Fitt text 
#+begin_src common-lisp
  (cl-format nil "|~vA|"       10 "Test") ; "|Test      |"
  (cl-format nil "|~v:@<~A~>|" 10 "Test") ; "|   Test   |"
  (cl-format nil "|~v@A|"      10 "Test") ; "|      Test|"
#+end_src

** Sequences
#+begin_src clojure
  (cl-format nil "List: ~{`~A`~^, ~}" ["one" 2 "three"])
  ;; => "List: `one`, `2`, `three`"
  (cl-format nil "~{ + ~{~A~^ - ~} ~%~}" (seq {:some 1 :vvds 2 :dfsa "fdkasl"}))
  ;; => " + :some - 1 \n + :vvds - 2 \n + :dfsa - fdkasl \n"
#+end_src

* 

