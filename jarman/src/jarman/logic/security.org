* Vocabulary
  - /PassPhrasses/ - is special string sequnece for protect your private key, generated by =openssl=
    
* Library

  For encripting any message import =jarman.logic.security= namespace.
  
  #+begin_src clojure :results silent
    (ns jarman.logic.security)
  #+end_src

  You can generate keypair for own usage. Function =generate-keypair= take key lenght for =RSA= standart, and return object =KeyPair=. From it you can obtain public (=getPublic= method) and private (=getPrivate= method) keys.
  
  #+begin_src clojure :results silent
    (def keypair (generate-keypair 512))
    (def pubkey (.getPublic keypair))
    (def privkey (.getPrivate keypair))
    
    (encrypt "{:hello \"World\"}" pubkey)
    (decrypt (encrypt "{:hello \"World\"}" pubkey) privkey)
  #+end_src

  But another way for usage data encryption is using PEM RSA keys generated by the =openssl= or =gpg=. After generated pair of keys, convert key's to =KeyPair= java security class. 
  
  #+begin_src clojure :results silent
    (def keypair (pem-string->key-pair (slurp env/security-private-key)))
    (def pubkey  (pem-string->pub-key  (slurp env/security-public-key)))
    
    (encrypt "{:hello \"World\"}" pubkey)
    (decrypt (encrypt "{:hello \"World\"}" pubkey) (.getPrivate keypair))
  #+end_src

  For more comfortable usage encryption and decription use ~encrypt-local~ and ~decrypt-local~, function which contain specially generated key

  #+begin_src clojure :results silent
    (decrypt-local (encrypt-local "some"))
  #+end_src
  
* Keypair

** Generate KeyPair 
   #+begin_src sh
     # Generate AES-256 encrypted private key
     openssl genrsa -aes256 -out privkey.pem 2048

     # Generate public key from previously created private key.
     openssl rsa -pubout -in privkey.pem -out pubkey.pem
   #+end_src
  
** disable passphrases

   We should do converting([[https://stackoverflow.com/questions/15656644/get-keypair-from-pem-key-with-bouncycastle][with reference to bouncycastle issue]]) private key to unencrypted private key, which be easyly swapped to the program.
   
   #+begin_src sh
     openssl rsa -in ./prikey.pem -out ./privkey-no-pass.pem
   #+end_src
