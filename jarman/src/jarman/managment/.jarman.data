;; -*- mode: Clojure;-*-
(require '[clojure.set :refer [rename-keys]])
(require '[jarman.logic.sql-tool :refer [select! update! insert! alter-table! create-table! delete! drop-table show-table-columns show-tables]])
(require '[jarman.logic.connection :as db])
(require '[jarman.logic.metadata])
(require '[jarman.application.permissions])

;; ^[[:blank:]]\(:id\|:name\|:plug-place\|:tables\|:view-columns\|:model-insert\|:active-buttons\|:permission\|:dialog\|:actions\|:buttons\|:query\)$

(jarman.application.permissions/permission-groups-add
  {:hrtime-all {:doc "Allow all elements in Ekka module"}})

(def metadata-list
  [{:id nil,
    :table_name "jarman_profile",
    :prop
    {:table
     {:field "jarman_profile",
      :representation "jarman_profile",
      :description nil,
      :is-system? false,
      :is-linker? false,
      :allow-modifing? true,
      :allow-deleting? true,
      :allow-linking? true},
     :columns
     [{:representation "Name", :field-qualified :jarman_profile.name
       :description nil, :private? false, :default-value nil, :editable? true, :field :name,
       :column-type {:stype "varchar(20)", :tname :varchar, :tspec nil, :tlimit 20, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 20}}
      {:representation "Configuration", :field-qualified :jarman_profile.configuration
       :description nil, :private? false, :default-value nil, :editable? true, :field :configuration,
       :column-type {:stype "tinytext", :tname :tinytext, :tspec nil, :tlimit nil, :tnull false, :textra "", :tdefault "{}", :tkey ""},
       :component {:type :jsgl-textarea, :value "{}"}}]}}
   {:id nil,
    :table_name "jarman_user",
    :prop
    {:table
     {:field "jarman_user",
      :representation "jarman_user",
      :description nil,
      :is-system? false,
      :is-linker? false,
      :allow-modifing? true,
      :allow-deleting? true,
      :allow-linking? true},
     :columns
     [{:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :login,
       :column-type {:stype "varchar(100)", :tname :varchar, :tspec nil, :tlimit 100, :tnull false, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 100},
       :representation "Login",
       :field-qualified :jarman_user.login}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :password,
       :column-type {:stype "varchar(100)", :tname :varchar, :tspec nil, :tlimit 100, :tnull false, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 100},
       :representation "Password",
       :field-qualified :jarman_user.password}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :first_name,
       :column-type {:stype "varchar(100)", :tname :varchar, :tspec nil, :tlimit 100, :tnull false, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 100},
       :representation "First name",
       :field-qualified :jarman_user.first_name}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :last_name,
       :column-type {:stype "varchar(100)", :tname :varchar, :tspec nil, :tlimit 100, :tnull false, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 100},
       :representation "Last name",
       :field-qualified :jarman_user.last_name}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :configuration,
       :column-type {:stype "text", :tname :text, :tspec nil, :tlimit nil, :tnull false, :textra "", :tdefault "'{}'", :tkey ""},
       :component {:type :jsgl-textarea, :value "'{}'"},
       :representation "Configuration",
       :field-qualified :jarman_user.configuration}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :id_jarman_profile,
       :column-type {:stype "bigint(120) unsigned", :tname :bigint, :tspec :unsigned, :tlimit 120, :tnull false, :textra "", :tdefault nil, :tkey "MUL"},
       :component {:type :jsgl-link},
       :foreign-keys [{:id_jarman_profile :jarman_profile} {:delete :cascade, :update :cascade}],
       :representation "Id profile",
       :field-qualified :jarman_user.id_jarman_profile,
       :key-table :jarman_profile}]}}

   {:id nil,
    :table_name "user",
    :prop
    {:table
     {:field "user",
      :representation "user",
      :description nil,
      :is-system? false,
      :is-linker? false,
      :allow-modifing? true,
      :allow-deleting? true,
      :allow-linking? true},
     :columns
     [{:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :first_name,
       :column-type {:stype "varchar(100)", :tname :varchar, :tspec nil, :tlimit 100, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 100},
       :representation "First name",
       :field-qualified :user.first_name}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :last_name,
       :column-type {:stype "varchar(50)", :tname :varchar, :tspec nil, :tlimit 50, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 50},
       :representation "Last name",
       :field-qualified :user.last_name}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :work_type,
       :column-type {:stype "varchar(30)", :tname :varchar, :tspec nil, :tlimit 30, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 30},
       :representation "Work type",
       :field-qualified :user.work_type}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :act,
       :column-type {:stype "varchar(15)", :tname :varchar, :tspec nil, :tlimit 15, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 15},
       :representation "Act",
       :field-qualified :user.act}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :section,
       :column-type {:stype "varchar(3)", :tname :varchar, :tspec nil, :tlimit 3, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 3},
       :representation "Section",
       :field-qualified :user.section}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :teta_nr,
       :column-type {:stype "varchar(10)", :tname :varchar, :tspec nil, :tlimit 10, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 10},
       :representation "Teta nr",
       :field-qualified :user.teta_nr}]}}

   {:id nil,
    :table_name "card",
    :prop
    {:table
     {:field "card",
      :representation "card",
      :description nil,
      :is-system? false,
      :is-linker? false,
      :allow-modifing? true,
      :allow-deleting? true,
      :allow-linking? true},
     :columns
     [{:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :rfid,
       :column-type {:stype "varchar(20)", :tname :varchar, :tspec nil, :tlimit 20, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 20},
       :representation "RFID",
       :field-qualified :card.rfid}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :card_nr,
       :column-type {:stype "varchar(20)", :tname :varchar, :tspec nil, :tlimit 20, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 20},
       :representation "Card nr",
       :field-qualified :card.card_nr}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :id_user,
       :column-type {:stype "bigint(120) unsigned", :tname :bigint, :tspec :unsigned, :tlimit 120, :tnull true, :textra "", :tdefault nil, :tkey "MUL"},
       :component {:type :jsgl-link},
       :foreign-keys [{:id_user :user} {:delete :null, :update :null}],
       :representation "Id user",
       :field-qualified :card.id_user,
       :key-table :user}]}}
   
   {:id nil,
    :table_name "registration",
    :prop
    {:table
     {:field "registration",
      :representation "registration",
      :description nil,
      :is-system? false,
      :is-linker? false,
      :allow-modifing? true,
      :allow-deleting? true,
      :allow-linking? true},
     :columns
     [{:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :datetime,
       :column-type {:stype "datetime", :tname :datetime, :tspec nil, :tlimit nil, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-datetime-label, :value nil},
       :representation "Datetime",
       :field-qualified :registration.datetime}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :direction,
       :column-type {:stype "varchar(3)", :tname :varchar, :tspec nil, :tlimit 3, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-text, :value "", :char-limit 3},
       :representation "Direction",
       :field-qualified :registration.direction}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :id_user,
       :column-type {:stype "bigint(120) unsigned", :tname :bigint, :tspec :unsigned, :tlimit 120, :tnull true, :textra "", :tdefault nil, :tkey ""},
       :component {:type :jsgl-digit, :value 0, :num-limit 120},
       :representation "Id user",
       :field-qualified :registration.id_user}
      {:description nil,
       :private? false,
       :default-value nil,
       :editable? true,
       :field :id_card,
       :column-type {:stype "bigint(120) unsigned", :tname :bigint, :tspec :unsigned, :tlimit 120, :tnull true, :textra "", :tdefault nil, :tkey "MUL"},
       :component {:type :jsgl-link},
       :foreign-keys [{:id_card :card} {:delete :null, :update :null}],
       :representation "Id card",
       :field-qualified :registration.id_card,
       :key-table :card}]}}
   
   ])


(def view-list
  (quote
    ((defview user
       (table
         :id :jarman_user
         :name "user"
         :permission :ekka-all
         :tables [:jarman_user :permission]
         :model-configurations
         {:insert
          {:fields
           [[:jarman_user.login [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.password [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.first_name [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.last_name [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.configuration [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.id_jarman_profile [(fn [m] (assoc-in m [:component :plugin-path] [:jarman_profile :dialog-table :jarman_profile-dialog]))]]]
           :additional
           [{:type :jsgl-button, :value "Do insert!", :on-click :insert-action}]}
          :update
          {:fields
           [[:jarman_user.login [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.password [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.first_name [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.last_name [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.configuration [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_user.id_jarman_profile [(fn [m] (assoc-in m [:component :plugin-path] [:jarman_profile :dialog-table :jarman_profile-dialog]))]]]
           :additional
           [{:type :jsgl-button :value "Do delete!" :on-click :delete-action}
            {:type :jsgl-button :value "Do update!" :on-click :update-action}]}}
         :actions
         {:insert-action
          (fn [state! dispatch!]
            ;; (jarman.org/print-line "INSERT!")
            (jarman.logic.connection/exec
              (jarman.logic.sql-tool/insert!
                {:table_name :jarman_user
                 :set (jarman.logic.metadata/convert_model->flattfields
                        (:model-changes (state!)) :jarman_user)}))
            (dispatch! {:route :main-table :action :refresh-to-bottom})
            (dispatch! {:action :switch-plugin-ui-mode :debug true :plugin-ui-mode :insert :erease-selected? true
                        :model (jarman.logic.metadata/convert_metadata->model
                                 (.return-table_name (-> (state!) :plugin-toolkit :meta-obj)))}))
          :delete-action
          (fn [state! dispatch!]
            ;; (jarman.org/print-line "INSERT!")
            (if (get-in (state!) [:model-changes :jarman_user.id])
              (do
                (jarman.logic.connection/exec
                  (jarman.logic.sql-tool/delete!
                    {:table_name :jarman_user
                     :where [:= :jarman_user.id (get-in (state!) [:model-changes :jarman_user.id])]}))
                (dispatch! {:route :main-table :action :refresh})
                (dispatch! {:action :switch-plugin-ui-mode :debug true :plugin-ui-mode :insert :erease-selected? true
                            :model (jarman.logic.metadata/convert_metadata->model
                                     (.return-table_name (-> (state!) :plugin-toolkit :meta-obj)))}))
              (jarman.interaction/danger "Delete user action" "ID is empty for model")))
          :update-action
          (fn [state! dispatch!]
            ;; (println "UPDATE!")
            (if (get-in (state!) [:model-changes :jarman_user.id_jarman_profile])
              (do
                (jarman.logic.connection/exec
                  (jarman.logic.sql-tool/update!
                    {:table_name :jarman_user
                     :set (jarman.logic.metadata/convert_model->flattfields
                            (:model-changes (state!)) :jarman_user)
                     :where [:= :jarman_user.id (get-in (state!) [:model-changes :jarman_user.id])]}))
                (dispatch! {:route :main-table :action :refresh}))
              (jarman.interaction/danger "Update user action" "ID is empty for model")))}
         :view-configurations
         {:socket-id :main-table
          :type :jsgl-database-table
          :tables  [:jarman_user :jarman_profile]
          :columns
          [:jarman_user.login
           :jarman_user.password
           :jarman_user.first_name
           :jarman_user.last_name
           :jarman_user.configuration
           :jarman_profile.name
           :jarman_profile.configuration]
          :socket-refreshable-query
          {:table_name :jarman_user,
           :column
           [:#as_is
            :jarman_user.id
            :jarman_user.login
            :jarman_user.password
            :jarman_user.first_name
            :jarman_user.last_name
            :jarman_user.configuration
            :jarman_user.id_jarman_profile
            :jarman_profile.name
            :jarman_profile.configuration]
           :inner-join :jarman_user->jarman_profile}}))

     (defview profile
       (table
         :id :jarman_profile
         :name "profile"
         :tables [:jarman_profile]
         :permission :ekka-all

         :model-configurations
         {:insert
          {:fields
           [[:jarman_profile.name [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_profile.configuration [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]]}
          :update
          {:fields
           [[:jarman_profile.name [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]
            [:jarman_profile.configuration [(fn [m] (assoc-in m [:component :on-change] (fn [e] (seesaw.core/text e))))]]]}}
         
         :view-configurations
         {:socket-id :main-table
          :type :jsgl-database-table
          :tables  [:jarman_profile]
          :columns [:jarman_profile.name :jarman_profile.configuration]
          :socket-refreshable-query
          {:table_name :jarman_profile,
           :column [:#as_is :jarman_profile.id :jarman_profile.name :jarman_profile.configuration]}})
       
       (dialog-table
         :id :jarman_profile-dialog
         :name "Profile dialog"
         :permission :ekka-all
         :tables [:jarman_profile]
         :view-configurations
         {:type :jsgl-database-table
          :tables  [:jarman_profile]
          :columns [:jarman_profile.name :jarman_profile.configuration]
          :data 
          (fn []
            (vec
              (jarman.logic.connection/query
                (jarman.logic.sql-tool/select!
                  {:table_name :jarman_profile,
                   :column
                   [:#as_is
                    :jarman_profile.id
                    :jarman_profile.name
                    :jarman_profile.configuration]}))))})))))


;;;;;;;;;;;;;;;;;;;;;
;;; BUISNESS DATA ;;;
;;;;;;;;;;;;;;;;;;;;;

(defn- fill-data-profile []
  (let [join (fn ([] []) ([coll coll-to-join] (into coll coll-to-join)))
        ;; -------
        ADMIN-GROUPS [:admin-update :admin-extension :admin-dataedit]
        DEVEL-GROUPS [:developer-manage :developer-alpha :developer]
        MANAG-GROUPS [:managment]
        HRTIME-GROUPS  [:hrtime-all]]
    (db/exec (delete! {:table_name :jarman_profile}))
    (db/exec
     (insert! 
      {:table_name :jarman_profile
       :column-list [:name :configuration]
       :values [["admin"     (pr-str {:groups (-> (join) (join ADMIN-GROUPS) (join DEVEL-GROUPS) (join MANAG-GROUPS) (join HRTIME-GROUPS))})]
                ["developer" (pr-str {:groups (-> (join) (join DEVEL-GROUPS) (join MANAG-GROUPS) (join HRTIME-GROUPS))})]
                ["user"      (pr-str {:groups (-> (join) (join HRTIME-GROUPS))})]]}))))

(defn- fill-data-user []
  (let [profile
        {"admin" (first (db/query (select! {:table_name :jarman_profile :column [:id] :where [:= :name "admin"]})))
         "dev"   (first (db/query (select! {:table_name :jarman_profile :column [:id] :where [:= :name "developer"]})))
         "user"  (first (db/query (select! {:table_name :jarman_profile :column [:id] :where [:= :name "user"]})))}
        create-user-if-not-exist 
        (fn [login-pass configuration]
         (if (empty? (db/query (select! {:table_name :jarman_user :where [:= :login login-pass]})))
           (db/exec
            (insert! {:table_name :jarman_user
                      :column-list [:login :password :first_name :last_name :id_jarman_profile :configuration]
                      :values [[login-pass login-pass login-pass login-pass (get-in profile [login-pass :id]) (pr-str configuration)]]}))))]
    ;;----------------------------------
    (when (get profile "admin")
      (create-user-if-not-exist "admin" {}))
    ;;----------------------------------
    (when (get profile "dev")
      (create-user-if-not-exist "dev" {}))
    ;;----------------------------------
    (when (get profile "user")
      (create-user-if-not-exist "user" {}))))

(defn populate-data []
  (println "Fill profiles")
  (fill-data-profile)
  (println "Fill users")
  (fill-data-user))

;;;;;;;;;;;;;;
;;; Events ;;;
;;;;;;;;;;;;;;

(require 'jarman.managment.data-managment)
(require 'jarman.logic.view-manager)
;;; You not need to implement all, 
;;; only those you need for managment

(defn on-delete []
  (println "Deleting all jarman system/business shemas.")
  (jarman.managment.data-managment/database-delete-scheme metadata-list))

(defn on-backup []
  (println "`on-backup` not yet impelemented"))

(defn on-app-start []
  (println "Starting verifing system tables.")
  (jarman.managment.data-managment/database-verify-system-tables))

(defn on-meta-persist []
  (println "Persisting metadata to database.")
  (jarman.managment.data-managment/metadata-persist-into-database metadata-list))

(defn on-meta-clean []
  (println "Cleaning metadata from database.")
  (jarman.managment.data-managment/database-clear-metadata))

(defn on-meta-refresh []
  (println "Refreshing metadata structure in databse")
  (on-meta-clean)
  (on-meta-persist))

(defn on-view-persist []
  (println "Persisting views to database.")
  (jarman.managment.data-managment/views-persist-into-database view-list))

(defn on-view-clean []
  (println "Cleaning views from database.")
  (jarman.logic.view-manager/view-clean))

(defn on-view-refresh []
  (println "Refreshing views in databse")
  (on-view-clean)
  (on-view-persist))

(defn on-meta-persist []
  (println "Persisting views to database.")
  (jarman.managment.data-managment/metadata-persist-into-database metadata-list))

(defn on-meta-clean []
  (println "Cleaning views from database.")
  (jarman.managment.data-managment/database-clear-metadata))

(defn on-meta-refresh []
  (println "Refreshing views in databse")
  (on-meta-clean)
  (on-meta-persist))

(defn on-app-close []
  (println "`on-app-close` not yet impelemented"))

(defn on-crash []
  (println "`on-crash` not yet impelemented"))

(defn on-log []
  (println "`on-log` not yet impelemented"))

(defn on-clear []
  (println "`on-clear` not yet impelemented"))

(defn on-info []
  (println "\nDatabase:")
  (jarman.managment.data-managment/database-info)
  (println "\n.jarman.data Metadata:")
  (jarman.managment.data-managment/metadata-info metadata-list)
  (println "\nDatabase Metadata:")
  (jarman.managment.data-managment/metadata-info (jarman.logic.metadata/return-metadata))
  (println "\n.jarman.data Views")
  (jarman.managment.data-managment/view-info view-list)
  (println "\n.Database Views")
  (jarman.managment.data-managment/view-info (jarman.logic.view-manager/loader-from-db)))

(defn on-install []
  (println "Installing jarman schemas, it gonna take some time...")
  (println "cleaning all tables.")
  (jarman.managment.data-managment/database-delete-scheme metadata-list)
  (println "creating system tables.")
  (jarman.managment.data-managment/database-verify-system-tables)
  (println "creating business tables.")
  (jarman.managment.data-managment/database-create-scheme metadata-list)
  (println "persisting metadata.")
  (jarman.managment.data-managment/metadata-persist-into-database metadata-list)
  (println "Refreshing views in databse")
  (on-view-persist)
  (println "Populating data")
  (populate-data))

(comment
  (on-install)
  (on-delete)
  (on-backup)
  (on-app-start)
  (on-app-close)
  (on-crash)
  (on-log)
  (on-clear)
  (on-info)
  ;; ----
  (on-meta-refresh)
  (on-meta-persist)
  (on-meta-clean)
  (on-view-refresh)
  (on-view-persist)
  (on-view-clean)

  (for [table ["jarman_user", "jarman_profile"]]
    (db/exec
      (drop-table table)))
  (jarman.managment.data-managment/database-verify-system-tables)
  (populate-data))

(comment
  (jarman.managment.data-managment/view-info view-list)
  (jarman.managment.data-managment/view-info (jarman.logic.view-manager/loader-from-db))
  (jarman.managment.data-managment/views-persist-into-database view-list)
  (jarman.managment.data-managment/database-info)
  (jarman.managment.data-managment/metadata-info metadata-list)
  (jarman.managment.data-managment/database-recreate-metadata-to-db)
  (jarman.managment.data-managment/database-recreate-metadata-to-file "some.edn")
  (jarman.managment.data-managment/metadata-persist-into-database metadata-list)
  (jarman.managment.data-managment/metadata-get-tables metadata-list)
  (jarman.managment.data-managment/database-verify-system-tables)
  (jarman.managment.data-managment/database-clear-metadata)
  (jarman.managment.data-managment/database-delete-business-scheme metadata-list)
  (jarman.managment.data-managment/database-delete-scheme metadata-list)
  (jarman.managment.data-managment/database-create-scheme metadata-list))

